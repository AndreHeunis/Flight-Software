/************************************************************************************
 * This file was auto-generated by CubeComponentSourceAutoGenerator.                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef __CUBESENSE_H
#define __CUBESENSE_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/***************************************************************************//**
* @addtogroup CubeComponents
* @{
******************************************************************************/

/***************************************************************************//**
* @addtogroup CubeSense
* @brief CubeSense Interface API
* @{
******************************************************************************/

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/// CubeSense telemetry ID selector.
typedef enum {
    CubeSenseTlmIdIdentification = 128, ///< Identification information for this node
    CubeSenseTlmIdCommsStatus = 129, ///< Communication status for the CubeSense. Includes command and telemetry counters and error flags
    CubeSenseTlmIdTcAck = 130, ///< Telemetry frame with acknowledge status of the previously sent command
    CubeSenseTlmIdNadirSensor = 148, ///< Nadir sensor capture and detection result
    CubeSenseTlmIdSunSensor = 149, ///< Sun sensor capture and detection result
    CubeSenseTlmIdPower = 154, ///< Current and voltage measurements
    CubeSenseTlmIdConfig = 168, ///< Configuration data for the CubeSense
    CubeSenseTlmIdImageFrame = 192, ///< A single 128-byte frame of image data
    CubeSenseTlmIdImageFrameData = 193, ///< Current frame number of the image being downloaded
    CubeSenseTlmIdNadirImage = 194, ///< Full nadir image (UART only)
    CubeSenseTlmIdSunImage = 195, ///< Full sun image (UART only)
    CubeSenseTlmIdNadirMask = 200, ///< 5 masked areas each specified by 4 coordinates
} CUBESENSE_TelemetryID_TypeDef;
/*
/// deg enumeration
typedef enum {
} CUBESENSE_deg_TypeDef;

/// mA enumeration
typedef enum {
} CUBESENSE_mA_TypeDef;
*/
/*******************************************************************************
 *******************************   STRUCTS   ***********************************
 ******************************************************************************/

/***************************************************************************//**
 * @brief
 *   CubeSense Identification telemetry structure.
 * @details
 *   Identification information for this node
 ******************************************************************************/
typedef struct{
    uint16_t runtimeSeconds; ///< Number of seconds since processor start-up
    uint16_t runtimeMilliseconds; ///< Number of milliseconds (after the integer second) since processor start-up
    uint8_t firmwareMajorVersion; ///<
    uint8_t firmwareMinorVersion; ///<
} CUBESENSE_TlmIdentification_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Communication Status telemetry structure.
 * @details
 *   Communication status for the CubeSense. Includes command and telemetry counters and error flags
 ******************************************************************************/
typedef struct{
    uint16_t tcCounter; ///< No. of telecommands received
    uint16_t tlmCounter; ///< No. of telemetry requests received
    uint8_t tcBufferOverrun; ///< TC buffer was overrun while receiving a telecommand
    uint8_t i2cTlmReadError; ///< While reading a TLM buffer in an I2C transaction, either the read carried on past the end of the buffer, or the read stopped before all bytes were read
    uint8_t uartProtocolError; ///< UART protocol error occurred
    uint8_t uartMsgIncomplete; ///< UART start-of-message identifier was received without a preceding end-of-message
} CUBESENSE_TlmCommsStatus_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Telecommand Acknowledge telemetry structure.
 * @details
 *   Telemetry frame with acknowledge status of the previously sent command
 ******************************************************************************/
typedef struct{
    uint8_t lastTcId; ///< ID of last received TC
    uint8_t isProcessed; ///< Flag to indicate if the last TC has been processed. Sending another TC while this flag is 0 will corrupt the TC buffer
    uint8_t lastTcError; ///< List of possible errors that could occur when processing a telecommand
} CUBESENSE_TlmTcAck_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Nadir Sensor telemetry structure.
 * @details
 *   Nadir sensor capture and detection result
 ******************************************************************************/
typedef struct{
    float nadirX; ///<  (measurment unit is [CHANNELVAL*0.01f])
    float nadirY; ///<  (measurment unit is [CHANNELVAL*0.01f])
    CUBESENSE__TypeDef busyStatus; ///< 0 = idle. 1 = waiting for other operation to finish, 2 = Busy capturing photo. 3  = performing detection.
    CUBESENSE__TypeDef result; ///< 0 = no error. 1 = camera timeout, 2 = Detection error
} CUBESENSE_TlmNadirSensor_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Sun Sensor telemetry structure.
 * @details
 *   Sun sensor capture and detection result
 ******************************************************************************/
typedef struct{
    float sunX; ///<  (measurment unit is [CHANNELVAL*0.01f])
    float sunY; ///<  (measurment unit is [CHANNELVAL*0.01f])
    CUBESENSE__TypeDef busyStatus; ///< 0 = idle. 1 = waiting for other operation to finish, 2 = Busy capturing photo. 3  = performing detection.
    CUBESENSE__TypeDef result; ///< 0 = no error. 1 = camera timeout, 2 = Detection error
} CUBESENSE_TlmSunSensor_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Power telemetry structure.
 * @details
 *   Current and voltage measurements
 ******************************************************************************/
typedef struct{
    float current3V3; ///< To obtain current from sample value: I  = 1.29 * TLM_3VCURRENT (returns current in mA) (measurment unit is [CHANNELVAL*1.29f])
    float currentNadirSram; ///< I = 0.21 * TLM_NADIRSRAMCURRENT (returns current in mA) (measurment unit is [CHANNELVAL*0.21f])
    float currentSunSram; ///< I = 0.21 * TLM_SUNSRAMCURRENT (returns current in mA) (measurment unit is [CHANNELVAL*0.21f])
    CUBESENSE__TypeDef nadirPower; ///<
    CUBESENSE__TypeDef sunPower; ///<
    CUBESENSE__TypeDef nadirOvercurrent; ///<
    CUBESENSE__TypeDef sunOvercurrent; ///<
} CUBESENSE_TlmPower_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Configuration telemetry structure.
 * @details
 *   Configuration data for the CubeSense
 ******************************************************************************/
typedef struct{
    uint8_t nadirThreshold; ///<
    uint8_t sunThreshold; ///<
    uint8_t nadirAutoAdjust; ///< 0 = disabled, 1 = enabled
    uint8_t nadirExposure; ///< exposure time register value
    uint8_t nadirAgc; ///<
    uint8_t nadirBlueGain; ///<
    uint8_t nadirRedGain; ///<
    uint8_t sunAutoAdjust; ///< 0 = disabled, 1 = enabled
    uint8_t sunExposure; ///< exposure time register value
    uint8_t sunAgc; ///<
    uint8_t sunBlueGain; ///<
    uint8_t sunRedGain; ///<
    uint8_t autoPowerDown; ///<
} CUBESENSE_TlmConfig_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Image Frame telemetry structure.
 * @details
 *   A single 128-byte frame of image data
 ******************************************************************************/
typedef struct{
    uint8_t*  imageBytes; ///< image bytes
} CUBESENSE_TlmImageFrame_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Image Frame Data telemetry structure.
 * @details
 *   Current frame number of the image being downloaded
 ******************************************************************************/
typedef struct{
    uint16_t frameNumber; ///< number of current frame loaded into download buffer
    uint8_t checkSum; ///< XOR checksum of frame loaded into download buffer
} CUBESENSE_TlmImageFrameData_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Full Nadir Image telemetry structure.
 * @details
 *   Full nadir image (UART only)
 ******************************************************************************/
typedef struct{
    uint8_t*  imageBytes; ///< image bytes for entire image (UART only)
} CUBESENSE_TlmNadirImage_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Full Sun Image telemetry structure.
 * @details
 *   Full sun image (UART only)
 ******************************************************************************/
typedef struct{
    uint8_t*  imageBytes; ///< image bytes for entire image (UART only)
} CUBESENSE_TlmSunImage_TypeDef;

/***************************************************************************//**
 * @brief
 *   CubeSense Request Masking Areas telemetry structure.
 * @details
 *   5 masked areas each specified by 4 coordinates
 ******************************************************************************/
typedef struct{
    uint16_t area1Xmin; ///< Minimum X of Area 1
    uint16_t area1Xmax; ///< Maximum X of Area 1
    uint16_t area1Ymin; ///< Minimum Y of Area 1
    uint16_t area1Ymax; ///< Maximum Y of Area 1
    uint16_t area2Xmin; ///< Minimum X of Area 2
    uint16_t area2Xmax; ///< Maximum X of Area 2
    uint16_t area2Ymin; ///< Minimum Y of Area 2
    uint16_t area2Ymax; ///< Maximum Y of Area 2
    uint16_t area3Xmin; ///< Minimum X of Area 3
    uint16_t area3Xmax; ///< Maximum X of Area 3
    uint16_t area3Ymin; ///< Minimum Y of Area 3
    uint16_t area3Ymax; ///< Maximum Y of Area 3
    uint16_t area4Xmin; ///< Minimum X of Area 4
    uint16_t area4Xmax; ///< Maximum X of Area 4
    uint16_t area4Ymin; ///< Minimum Y of Area 4
    uint16_t area4Ymax; ///< Maximum Y of Area 4
    uint16_t area5Xmin; ///< Minimum X of Area 5
    uint16_t area5Xmax; ///< Maximum X of Area 5
    uint16_t area5Ymin; ///< Minimum Y of Area 5
    uint16_t area5Ymax; ///< Maximum Y of Area 5
} CUBESENSE_TlmNadirMask_TypeDef;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

int32_t CUBESENSE_createTelemetryRequest(uint8_t *tlmReqBuffer, CUBESENSE_TelemetryID_TypeDef tlmId);

int8_t CUBESENSE_updateTlmIdentification(CUBESENSE_TlmIdentification_TypeDef* identification, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmCommsStatus(CUBESENSE_TlmCommsStatus_TypeDef* commsStatus, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmTcAck(CUBESENSE_TlmTcAck_TypeDef* tcAck, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmNadirSensor(CUBESENSE_TlmNadirSensor_TypeDef* nadirSensor, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmSunSensor(CUBESENSE_TlmSunSensor_TypeDef* sunSensor, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmPower(CUBESENSE_TlmPower_TypeDef* power, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmConfig(CUBESENSE_TlmConfig_TypeDef* config, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmImageFrame(CUBESENSE_TlmImageFrame_TypeDef* imageFrame, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmImageFrameData(CUBESENSE_TlmImageFrameData_TypeDef* imageFrameData, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmNadirImage(CUBESENSE_TlmNadirImage_TypeDef* nadirImage, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmSunImage(CUBESENSE_TlmSunImage_TypeDef* sunImage, uint8_t* tlmBuffer);
int8_t CUBESENSE_updateTlmNadirMask(CUBESENSE_TlmNadirMask_TypeDef* nadirMask, uint8_t* tlmBuffer);

int8_t CUBESENSE_createTcmdReset(uint8_t* tcBuffer, uint8_t resetType);
int8_t CUBESENSE_createTcmdSetCameraPower(uint8_t* tcBuffer, uint8_t nadPower, uint8_t sunPower);
int8_t CUBESENSE_createTcmdCaptureDetect(uint8_t* tcBuffer, uint8_t captureSelect, uint8_t detectSelect, uint8_t shift);
int8_t CUBESENSE_createTcmdSetNadirThreshold(uint8_t* tcBuffer, uint8_t threshold);
int8_t CUBESENSE_createTcmdSetSunThreshold(uint8_t* tcBuffer, uint8_t threshold);
int8_t CUBESENSE_createTcmdSetNadirAutoAdjust(uint8_t* tcBuffer, uint8_t enabled);
int8_t CUBESENSE_createTcmdSetNadirSensorSettings(uint8_t* tcBuffer, uint8_t exposure, uint8_t aGC, uint8_t blueGain, uint8_t redGain);
int8_t CUBESENSE_createTcmdSetSunAutoAdjust(uint8_t* tcBuffer, uint8_t enabled);
int8_t CUBESENSE_createTcmdSetSunSensorSettings(uint8_t* tcBuffer, uint8_t exposure, uint8_t aGC, uint8_t blueGain, uint8_t redGain);
int8_t CUBESENSE_createTcmdSetI2cWatchdog(uint8_t* tcBuffer, uint8_t enabled);
int8_t CUBESENSE_createTcmdSetSunBoresight(uint8_t* tcBuffer, uint16_t xpixel, uint16_t ypixel);
int8_t CUBESENSE_createTcmdSetNadirBoresight(uint8_t* tcBuffer, uint16_t xpixel, uint16_t ypixel);
int8_t CUBESENSE_createTcmdSetNadirMask(uint8_t* tcBuffer, uint8_t areaNumber, uint16_t xmin, uint16_t xmax, uint16_t ymin, uint16_t ymax);
int8_t CUBESENSE_createTcmdInitializeImageDownload(uint8_t* tcBuffer, uint8_t imageSelection, uint8_t imageSize);
int8_t CUBESENSE_createTcmdAdvanceImageDownload(uint8_t* tcBuffer, uint16_t nextFrame);

/** @} (end addtogroup CubeSense) */
/** @} (end addtogroup CubeComponents) */

#ifdef __cplusplus
}
#endif

#endif // __CUBESENSE_H

